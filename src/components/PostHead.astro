---
import { SITE } from '@/consts'
import type { CollectionEntry } from 'astro:content'
import Schema from '@/components/schema'

interface Props {
  post: CollectionEntry<'blog'>
}

const { post } = Astro.props

const title = post.data.title || SITE.title
const description = post.data.description || SITE.description
const fallbackImage = new URL('/static/1200x630.png', Astro.site).toString()
const image = post?.data?.image?.src ? `${SITE.href}${post.data.image.src}` : fallbackImage
const author = post.data.authors ? post.data.authors.join(', ') : SITE.author
const canonicalUrl = new URL(Astro.url.pathname, Astro.site).toString()
const datePublished = post.data.date
const dateModified = post.data?.updatedDate || post.data.date
---

<title>{`${title} | ${SITE.title}`}</title>
<meta name="title" content={`${title} | ${SITE.title}`} />
<meta name="description" content={description} />
<link rel="canonical" href={canonicalUrl} />

<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image} />
<meta property="og:image:alt" content={title} />
<meta property="og:type" content="website" />
<meta property="og:locale" content={SITE.locale} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:author" content={author} />

<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={image} />
<meta name="twitter:image:alt" content={title} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content={author} />

{post?.data.tags &&
  post.data.tags.map((tag: string) => (
    <meta property="article:tag" content={tag} />
  ))
}

<Schema
    item={{
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": `${Astro.site}${Astro.url.pathname}`
    },
    "headline": post.data.title,
    "description": post.data.description,
    "image": [`${SITE.href}${post.data.image?.src || '/static/1200x630.png'}`],
    "author": {
      "@type": "Person",
      "name": post.data.authors?.join(', ') || SITE.author
    },
    "publisher": {
      "@type": "Organization",
      "name": SITE.title,
      "logo": {
        "@type": "ImageObject",
        "url": `${SITE.href}/static/logo.png`
      }
    },
    "datePublished": new Date(post.data.date).toISOString(),
    "dateModified": new Date(post.data.updatedDate || post.data.date).toISOString()
  }}
  />