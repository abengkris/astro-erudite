---
import { Schema } from '@/components/schema'
import { SITE } from '@/consts'
import type { CollectionEntry } from 'astro:content'

interface Props {
  post: CollectionEntry<'karya'>
}

const { post } = Astro.props

const title = post.data.title || SITE.title
const description = post.data.description || SITE.description
const fallbackImage = new URL('/static/1200x630.png', Astro.site).toString()
const image = post?.data?.image?.src
  ? `${SITE.href}${post.data.image.src}`
  : fallbackImage
const author = post.data.authors ? post.data.authors.join(', ') : SITE.author
const canonicalUrl = new URL(Astro.url.pathname, Astro.site).toString()
---

<title>{`${title} | ${SITE.title}`}</title>
<meta name="title" content={`${title} | ${SITE.title}`} />
<meta name="description" content={description} />
<link rel="canonical" href={canonicalUrl} />

<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image} />
<meta property="og:image:alt" content={title} />
<meta property="og:type" content="website" />
<meta property="og:locale" content={SITE.locale} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:author" content={author} />
<meta property="og:type" content="article" />

<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={image} />
<meta name="twitter:image:alt" content={title} />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:creator" content={author} />

{
  post?.data.tags &&
    post.data.tags.map((tag: string) => (
      <meta property="article:tag" content={tag} />
    ))
}

<Schema
  item={{
    '@context': 'https://schema.org',
    '@type': 'WebPage',
    'name': post.data.title,
    'description': post.data.description,
    'mainEntity': {
      '@type': post.data.tags?.includes('puisi') ? 'CreativeWork' : post.data.tags?.includes('cerpen') ? 'ShortStory' : 'CreativeWork',
      '@id': `${SITE.href}${Astro.url.pathname}`,
      'name': post.data.title,
      'author': post.data.authors
        ? post.data.authors.map(author => ({
            '@type': 'Person',
            'name': author
          }))
        : {
            '@type': 'Person',
            'name': SITE.author
          },
      'description': post.data.description,
      'genre': post.data.tags?.includes('puisi') ? 'Poetry' : post.data.tags?.includes('cerpen') ? 'Fiction' : 'Fiction',
      'text': post.data.description || '',
      'keywords': post.data.tags?.join(',') || (post.data.tags?.includes('puisi') ? 'puisi, sastra, abeng, abengkris' : 'cerpen, fiksi, abeng, abengkris')
    },
    'image': {
      '@type': 'ImageObject',
      'url': `${SITE.href}${post.data.image?.src || '/static/1200x630.png'}`,
    },
    'publisher': {
      '@type': 'Organization',
      'name': SITE.title,
      'logo': {
        '@type': 'ImageObject',
        'url': `${SITE.href}/static/logo.png`
      }
    },
    'datePublished': new Date(post.data.date).toISOString(),
    'dateModified': new Date(post.data.updatedDate || post.data.date).toISOString(),
    'keywords': post.data.tags?.join(',') || (post.data.tags?.includes('puisi') ? 'puisi, sastra, abeng, abengkris' : 'cerpen, fiksi, abeng, abengkris')
  }}
/>
