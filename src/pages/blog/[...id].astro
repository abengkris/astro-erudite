---
import Breadcrumbs from '@/components/Breadcrumbs.astro'
import PostHead from '@/components/PostHead.astro'
import PostNavigation from '@/components/PostNavigation.astro'
import Link from '@/components/Link.astro'
import { ShareButton } from '@/components/ShareButton'
import TableOfContents from '@/components/TableOfContents.astro'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { badgeVariants } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Separator } from '@/components/ui/separator'
import Layout from '@/layouts/Layout.astro'
import { getAdjacentPosts, getAllPosts, parseAuthors } from '@/lib/data-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import { render } from 'astro:content'
import Support from '@/components/Support.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }))
}

const post = Astro.props
const currentPostId = Astro.params.id
const { Content, headings } = await render(post)
const { next, prev } = await getAdjacentPosts(currentPostId)
const authors = await parseAuthors(post.data.authors ?? [])
const url = Astro.url.href
---

<Layout isWide>
  <PostHead slot="head" post={post} />
  <section
    class="grid grid-cols-[minmax(0px,1fr)_min(calc(var(--breakpoint-md)-2rem),100%)_minmax(0px,1fr)] gap-y-6"
  >
    <div class="col-start-2">
      <Breadcrumbs
        items={[
          { href: '/karya', label: 'Karya', icon: 'lucide:archive' },
          { label: post.data.title, icon: 'lucide:file-text' },
        ]}
      />

      {post.data.image && (
        <Image
          src={post.data.image}
          alt={post.data.title}
          width={1200}
          height={630}
          class="my-6 w-full max-w-5xl object-cover"
        />
      )}

      <div class="flex flex-col gap-y-6">
        <div class="flex flex-col">
          <div class="flex items-start justify-between">
            <h1 class="mb-2 text-3xl leading-tight font-medium text-pretty">
              {post.data.title}
            </h1>
          </div>

          <div class="mb-6 flex items-center justify-between">
            <div class="flex items-center gap-3">
              <Image
                src={authors[0].avatar}
                alt={authors[0].name}
                width={36}
                height={36}
                class="rounded-full border-2 border-yellow-500"
              />
              <div>
                <Link
                  href={`/authors/${authors[0].id}`}
                  class="text-foreground hover:underline"
                >
                  {authors[0].name}
                </Link>
                <p class="text-sm text-gray-400">
                  {formatDate(post.data.date)} Â· {readingTime(post.body!)}
                </p>
              </div>
            </div>
            <div class="flex items-center gap-4">
              <ShareButton
                client:visible
                title={post.data.title}
                url={url}
                description={post.data.description}
              />
            </div>
          </div>
        </div>

        <!-- {headings.length > 0 && <TableOfContents headings={headings} />} -->

        <article class="prose max-w-none">
          <Content />
        </article>

        <div class="flex flex-wrap gap-2">
          {post.data.tags && post.data.tags.length > 0 ? (
            post.data.tags.map((tag) => (
              <a
                href={`/tags/${tag}`}
                class={badgeVariants({ variant: 'secondary' })}
              >
                <Icon name="lucide:hash" class="size-3" />
                {tag}
              </a>
            ))
          ) : (
            <span class="text-muted-foreground text-sm">No tags available</span>
          )}
        </div>

        <Support />

        <PostNavigation prevPost={prev} nextPost={next} />
      </div>
    </div>
  </section>

  <Button
    variant="outline"
    size="icon"
    className="group fixed right-8 bottom-8 z-50 hidden"
    id="scroll-to-top"
    title="Scroll to top"
    aria-label="Scroll to top"
  >
    <Icon
      name="lucide:arrow-up"
      class="mx-auto size-4 transition-all group-hover:-translate-y-0.5"
    />
  </Button>
</Layout>

<script>
  document.addEventListener('astro:page-load', () => {
    const scrollToTopButton = document.getElementById('scroll-to-top')
    const footer = document.querySelector('footer')

    if (scrollToTopButton && footer) {
      scrollToTopButton.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' })
      })

      window.addEventListener('scroll', () => {
        const footerRect = footer.getBoundingClientRect()
        const isFooterVisible = footerRect.top <= window.innerHeight

        scrollToTopButton.classList.toggle(
          'hidden',
          window.scrollY <= 300 || isFooterVisible,
        )
      })
    }
  })
</script>
